#include<stdio.h>

#include<stdlib.h>

#include<time.h>

#include<conio.h>



int suiji()//产生随机数

{

	srand(time(0));

	return (rand() % 4);

}



void suiji24(int a[4][4])//随机产生2或4

{

	int i, j, k, l;

	k = 0;

	int b[16][2];

	for (i = 0; i<4; i++)

	{

		for (j = 0; j<4; j++)

		{

			if (a[i][j] == 0)

			{

				b[k][0] = i;

				b[k++][1] = j;

			}

		}

	}

	srand(time(0));

	l = rand() % k;

	i = b[l][0];

	j = b[l][1];

	if (suiji() % 2 == 0)

		a[i][j] = 2;

	else

		a[i][j] = 4;

}



void set(int a[4][4])

{

	int i,j;

	for (i = 0; i < 4; i++)//初始化棋盘

	{

		for (j = 0; j < 4; j++)

		{

			a[i][j] = 0;

		}

	}

	suiji24(a);

	suiji24(a);

}

void print_num(int a[4][4], int m, int n)//输出函数，将数组元素输出到屏幕上

{

	if (a[m][n] == 0)

	{

		printf("     ");

	}

	else

	{

		printf("%5d", a[m][n]);

	}

}

void print(int a[4][4])

{

	printf("————————————— ");

	printf("|"); print_num(a, 0, 0); printf("|"); print_num(a, 0, 1); printf("|"); print_num(a, 0, 2); printf("|"); print_num(a, 0, 3); printf("|\n");

	printf("————————————— ");

	printf("|"); print_num(a, 1, 0); printf("|"); print_num(a, 1, 1); printf("|"); print_num(a, 1, 2); printf("|"); print_num(a, 1, 3); printf("|\n");

	printf("————————————— ");

	printf("|"); print_num(a, 2, 0); printf("|"); print_num(a, 2, 1); printf("|"); print_num(a, 2, 2); printf("|"); print_num(a, 2, 3); printf("|\n");

	printf("————————————— ");

	printf("|"); print_num(a, 3, 0); printf("|"); print_num(a, 3, 1); printf("|"); print_num(a, 3, 2); printf("|"); print_num(a, 3, 3); printf("|\n");

	printf("————————————— ");

}



int change(int a[4][4],char i)//合并移动，指的是将数值赋值给数组内对应的位置

{

	int k, j, top,left,right;

	int b[4];

	int c[4][4];

	for (j = 0; j < 4; j++)//设置一个独立的数组，并且把改变之前的数组复制到这个数组内

	{

		for (k = 0; k < 4; k++)

		{

			c[j][k] = a[j][k];

		}

	}

	if (i == 'w')//上移，使用栈的思想存储非零元素，并且相邻元素如果相同则相加并且出栈、输出，之后TOP指针指向后两个元素，一直如此循环，直到这一行元素被遍历完。

	{

		for (k = 0; k < 4; k++)

		{

			top = -1;

			for (j = 0; j < 4; j++)//初始化栈

				b[j] = 0;

			for (j = 3; j > -1; j--)//进栈

			{

				if (a[j][k] != 0)

				{

					top = top + 1;

					b[top] = a[j][k];

				}

			}

				for (j = 0; j < 4; j++)

				{

					if (top > -1)//如果栈不为空，则进行合并操作并且输出

					{

						if (top!=0&&b[top] == b[top - 1])//如果两个元素相等则进行接下来的操作。加入top != 0防止数组越界而导致程序崩溃。

						{

							a[j][k] = 2 * b[top];//合并，即数值乘二

							top = top - 2;//移动指针

						}

						else

						{

							a[j][k] = b[top--];//直接输出不合并

						}

					}

					else

					{

						a[j][k] = 0;//如果栈为空，而且循环结束，那么输出0

					}

				}

		}

	}

	if (i == 's')//下移操作，思想类似于W

	{

		for (k = 0; k < 4; k++)

		{

			top = -1;

			for (j = 0; j < 4; j++)

				b[j] = 0;

			for (j = 0; j < 4; j++)

			{

				if (a[j][k] != 0)

				{

					top = top + 1;

					b[top] = a[j][k];

				}

			}

				for (j = 3; j > -1; j--)

				{

					if (top > -1)

					{

						if (top!=0&&b[top] == b[top - 1])

						{

							a[j][k] = 2 * b[top];

							top = top - 2;

						}

						else

						{

							a[j][k] = b[top--];

						}

					}

					else

					{

						a[j][k] = 0;

					}

				}

		}

	}

	if (i == 'a')//左移操作，使用了另一种数据结构——队列

	{

		for (j = 0; j < 4; j++)

		{

			left = right = 0;//这里的left和right类似于队列的 front和 rear。

			for (k = 0; k < 4; k++)

				b[k] = 0;//初始化队列

			for (k = 0; k < 4; k++)//进队

			{

				if (a[j][k] != 0)

				{

					b[right++] = a[j][k];

				}

			}

			for (k = 0; k < 4; k++)

			{

				if (left<right)//如果队列为空，进行下面的操作。

				{

					if (left != 3 && b[left] == b[left + 1])//left加入 != 3防止数组越界

					{

						a[j][k] = 2 * b[left];//乘二操作，如果队列的相邻两个元素相同就合并。

						left = left + 2;//left移动到操作数的后两位

					}

					else

					{

						a[j][k] = b[left++];//如果不相等直接输出

					}

				}

				else

				{

					a[j][k] = 0;如果循环未结束而队列为空则直接输出"0"

				}

			}

		}

	}

	if (i == 'd')//思想同a

	{

		for (j = 0; j < 4; j++)

		{

			for (k = 0; k < 4; k++)

				b[k] = 0;

			left = right = 0;

			for (k = 3; k > -1; k--)

			{

				if (a[j][k] != 0)

				{

					b[right++] = a[j][k];

					

				}

			}

				for (k = 3; k > -1; k--)

				{

					if (left<right)

					{

						if (left != 3 && b[left] == b[left + 1])

						{

							a[j][k] = 2 * b[left];

							left = left + 2;

						}

						else

						{

							a[j][k] = b[left++];

						}

					}

					else

					{

						a[j][k] = 0;

					}

				}

		}

	}

	for (j = 0; j < 4; j++)//判断两个数组元素是否相等，相等则不产生随机数

	{

		for (k = 0; k < 4; k++)

		{

			if (a[j][k] != c[j][k])

			{

				return 1;

			}

		}

	}

	return 0;

}

char change_num(int j) {//键位相关，判断输入的数字并且转换为对应的字母

	char i;

	if (j == 72 || j == 119)

		i = 'w';

	if (j == 80 || j == 115)

		i = 's';

	if (j == 75 || j == 97)

		i = 'a';

	if (j == 77 || j == 100)

		i = 'd';

	return i;

}



void scan(int a[4][4])

{

	char i;

	int j;

	j = getch();//使用getchar可以不用回车输入，而且增加支持方向键



	/*scanf("%c", &i);

	getchar();*/

	system("cls");//清屏

	if (j == 224){

		j = getch();

	}

	i = change_num(j);

	if(change(a, i)){

		suiji24(a);

	}

}



int isover(int a[4][4])//判断游戏是否结束

{

	int i,j;

	for (i = 0; i < 4; i++)

	{

		for (j = 0; j < 4; j++)

		{

			if (a[i][j] == 2048)//判断有没有达到2048，有则结束游戏并且返回状态码“ 1 ”

			{

				return 1;

			}

			if (a[i][j] == 0)//判断是否还有0，有则游戏继续并且返回状态码“ 0 ”

			{

				return 0;

			}

		}

	}

      for (i = 0; i < 3; i++)

	   {

		  for (j = 0; j < 3; j++)

		   {

			   if (a[i][j] == a[i + 1][j] || a[i][j] == a[i][j + 1])//判断3*3这个范围内的相邻元素是否可以合并，如果可以则返回状态码“ 0 ”

			   {

			    	return 0;

		    	}

		   }

	   }

	  for (i = 0; i < 3; i++)//判断最后一排和最后一列元素是否可以合并

	  {

		  if (a[3][i] == a[3][i + 1])

		  {

			  return 0;

		  }

		  if (a[i][3] == a[i + 1][3])

		  {

			  return 0;

		  }

	  }

	return 2;//如果都不能合并则游戏失败并且返回状态码“ 2 ”

}



void welcome()//欢迎界面，介绍游戏的操作说明

{

	printf("\n");

	printf("----------|  |----------|  |           |  |----------|\n");

	printf("          |  |          |  |           |  |          |\n");

	printf("          |  |          |  |           |  |          |\n");

	printf("----------|  |          |  |-----------|  |----------|\n");

	printf("|            |          |              |  |          |\n");

	printf("|            |          |              |  |          |\n");

	printf("|----------  |----------|              |  |----------|\n");

	printf("\n\n使用w.s.a.d或者方向键来控制方向 \n\n");

	printf("powered by cz\n\n\n");

	system("pause");

	system("cls");

}



int main()

{

	int a[4][4];

	int i;

	i = 0;

	welcome();

	set(a);

	print(a);

	while (!i)

	{

		

		scan(a);

		print(a);

		i = isover(a);

	}

	if (i == 1)

	{

		printf("you win!\n ");

		system("pause");

	}

	if (i == 2)

	{

		printf("you lose!\n");

		system("pause");

	}

	return 0;

}
